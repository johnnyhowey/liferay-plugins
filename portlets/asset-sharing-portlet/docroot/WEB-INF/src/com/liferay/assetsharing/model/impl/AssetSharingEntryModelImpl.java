/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.assetsharing.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.assetsharing.model.AssetSharingEntry;
import com.liferay.assetsharing.model.AssetSharingEntryModel;
import com.liferay.assetsharing.model.AssetSharingEntrySoap;
import com.liferay.assetsharing.service.persistence.AssetSharingEntryPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AssetSharingEntry service. Represents a row in the &quot;Sharing_AssetSharingEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.assetsharing.model.AssetSharingEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetSharingEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssetSharingEntryImpl
 * @see com.liferay.assetsharing.model.AssetSharingEntry
 * @see com.liferay.assetsharing.model.AssetSharingEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AssetSharingEntryModelImpl extends BaseModelImpl<AssetSharingEntry>
	implements AssetSharingEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset sharing entry model instance should use the {@link com.liferay.assetsharing.model.AssetSharingEntry} interface instead.
	 */
	public static final String TABLE_NAME = "Sharing_AssetSharingEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "sharedClassNameId", Types.BIGINT },
			{ "sharedClassPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Sharing_AssetSharingEntry (classNameId LONG not null,classPK LONG not null,sharedClassNameId LONG not null,sharedClassPK LONG not null,primary key (classNameId, classPK, sharedClassNameId, sharedClassPK))";
	public static final String TABLE_SQL_DROP = "drop table Sharing_AssetSharingEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY assetSharingEntry.id.classNameId ASC, assetSharingEntry.id.classPK ASC, assetSharingEntry.id.sharedClassNameId ASC, assetSharingEntry.id.sharedClassPK ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sharing_AssetSharingEntry.classNameId ASC, Sharing_AssetSharingEntry.classPK ASC, Sharing_AssetSharingEntry.sharedClassNameId ASC, Sharing_AssetSharingEntry.sharedClassPK ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.assetsharing.model.AssetSharingEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.assetsharing.model.AssetSharingEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.assetsharing.model.AssetSharingEntry"),
			true);
	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static final long CLASSPK_COLUMN_BITMASK = 2L;
	public static final long SHAREDCLASSNAMEID_COLUMN_BITMASK = 4L;
	public static final long SHAREDCLASSPK_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssetSharingEntry toModel(AssetSharingEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AssetSharingEntry model = new AssetSharingEntryImpl();

		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setSharedClassNameId(soapModel.getSharedClassNameId());
		model.setSharedClassPK(soapModel.getSharedClassPK());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssetSharingEntry> toModels(
		AssetSharingEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AssetSharingEntry> models = new ArrayList<AssetSharingEntry>(soapModels.length);

		for (AssetSharingEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.assetsharing.model.AssetSharingEntry"));

	public AssetSharingEntryModelImpl() {
	}

	@Override
	public AssetSharingEntryPK getPrimaryKey() {
		return new AssetSharingEntryPK(_classNameId, _classPK,
			_sharedClassNameId, _sharedClassPK);
	}

	@Override
	public void setPrimaryKey(AssetSharingEntryPK primaryKey) {
		setClassNameId(primaryKey.classNameId);
		setClassPK(primaryKey.classPK);
		setSharedClassNameId(primaryKey.sharedClassNameId);
		setSharedClassPK(primaryKey.sharedClassPK);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AssetSharingEntryPK(_classNameId, _classPK,
			_sharedClassNameId, _sharedClassPK);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AssetSharingEntryPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AssetSharingEntry.class;
	}

	@Override
	public String getModelClassName() {
		return AssetSharingEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("sharedClassNameId", getSharedClassNameId());
		attributes.put("sharedClassPK", getSharedClassPK());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		Long sharedClassNameId = (Long)attributes.get("sharedClassNameId");

		if (sharedClassNameId != null) {
			setSharedClassNameId(sharedClassNameId);
		}

		Long sharedClassPK = (Long)attributes.get("sharedClassPK");

		if (sharedClassPK != null) {
			setSharedClassPK(sharedClassPK);
		}
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public long getSharedClassNameId() {
		return _sharedClassNameId;
	}

	@Override
	public void setSharedClassNameId(long sharedClassNameId) {
		_columnBitmask |= SHAREDCLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalSharedClassNameId) {
			_setOriginalSharedClassNameId = true;

			_originalSharedClassNameId = _sharedClassNameId;
		}

		_sharedClassNameId = sharedClassNameId;
	}

	public long getOriginalSharedClassNameId() {
		return _originalSharedClassNameId;
	}

	@JSON
	@Override
	public long getSharedClassPK() {
		return _sharedClassPK;
	}

	@Override
	public void setSharedClassPK(long sharedClassPK) {
		_columnBitmask |= SHAREDCLASSPK_COLUMN_BITMASK;

		if (!_setOriginalSharedClassPK) {
			_setOriginalSharedClassPK = true;

			_originalSharedClassPK = _sharedClassPK;
		}

		_sharedClassPK = sharedClassPK;
	}

	public long getOriginalSharedClassPK() {
		return _originalSharedClassPK;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AssetSharingEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetSharingEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetSharingEntryImpl assetSharingEntryImpl = new AssetSharingEntryImpl();

		assetSharingEntryImpl.setClassNameId(getClassNameId());
		assetSharingEntryImpl.setClassPK(getClassPK());
		assetSharingEntryImpl.setSharedClassNameId(getSharedClassNameId());
		assetSharingEntryImpl.setSharedClassPK(getSharedClassPK());

		assetSharingEntryImpl.resetOriginalValues();

		return assetSharingEntryImpl;
	}

	@Override
	public int compareTo(AssetSharingEntry assetSharingEntry) {
		AssetSharingEntryPK primaryKey = assetSharingEntry.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssetSharingEntry)) {
			return false;
		}

		AssetSharingEntry assetSharingEntry = (AssetSharingEntry)obj;

		AssetSharingEntryPK primaryKey = assetSharingEntry.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AssetSharingEntryModelImpl assetSharingEntryModelImpl = this;

		assetSharingEntryModelImpl._originalClassNameId = assetSharingEntryModelImpl._classNameId;

		assetSharingEntryModelImpl._setOriginalClassNameId = false;

		assetSharingEntryModelImpl._originalClassPK = assetSharingEntryModelImpl._classPK;

		assetSharingEntryModelImpl._setOriginalClassPK = false;

		assetSharingEntryModelImpl._originalSharedClassNameId = assetSharingEntryModelImpl._sharedClassNameId;

		assetSharingEntryModelImpl._setOriginalSharedClassNameId = false;

		assetSharingEntryModelImpl._originalSharedClassPK = assetSharingEntryModelImpl._sharedClassPK;

		assetSharingEntryModelImpl._setOriginalSharedClassPK = false;

		assetSharingEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetSharingEntry> toCacheModel() {
		AssetSharingEntryCacheModel assetSharingEntryCacheModel = new AssetSharingEntryCacheModel();

		assetSharingEntryCacheModel.classNameId = getClassNameId();

		assetSharingEntryCacheModel.classPK = getClassPK();

		assetSharingEntryCacheModel.sharedClassNameId = getSharedClassNameId();

		assetSharingEntryCacheModel.sharedClassPK = getSharedClassPK();

		return assetSharingEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", sharedClassNameId=");
		sb.append(getSharedClassNameId());
		sb.append(", sharedClassPK=");
		sb.append(getSharedClassPK());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.assetsharing.model.AssetSharingEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedClassNameId</column-name><column-value><![CDATA[");
		sb.append(getSharedClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedClassPK</column-name><column-value><![CDATA[");
		sb.append(getSharedClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AssetSharingEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetSharingEntry.class
		};
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _sharedClassNameId;
	private long _originalSharedClassNameId;
	private boolean _setOriginalSharedClassNameId;
	private long _sharedClassPK;
	private long _originalSharedClassPK;
	private boolean _setOriginalSharedClassPK;
	private long _columnBitmask;
	private AssetSharingEntry _escapedModel;
}